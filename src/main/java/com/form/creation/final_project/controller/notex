package com.form.creation.final_project.controller;

import com.form.creation.final_project.model.*;
import com.form.creation.final_project.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/forms")
public class FormController {

    @Autowired
    private FormRepository formRepository;

    @Autowired
    private UserRepository userRepository;

    @PostMapping("/create/{userId}")
    public String createForm(@PathVariable Long userId, @RequestBody Form form) {
        User user = userRepository.findById(userId).orElse(null);
        if (user == null) return "User not found!";
        form.setCreatedBy(user);
        formRepository.save(form);
        return "Form created successfully!";
    }

    @GetMapping("/all")
    public List<Form> getAllForms() {
        return formRepository.findAll();
    }

    @GetMapping("/user/{userId}")
    public List<Form> getFormsByUser(@PathVariable Long userId) {
        User user = userRepository.findById(userId).orElse(null);
        return (user == null) ? null : formRepository.findByCreatedBy(user);
    }

    @GetMapping("/{formId}")
    public Form getFormById(@PathVariable Long formId) {
        return formRepository.findById(formId).orElse(null);
    }

    @DeleteMapping("/delete/{formId}")
    public String deleteForm(@PathVariable Long formId) {
        if (!formRepository.existsById(formId)) return "Form not found!";
        formRepository.deleteById(formId);
        return "Form deleted successfully!";
    }
}

@RestController
@RequestMapping("/questions")
class QuestionController {

    @Autowired
    private QuestionRepository questionRepository;

    @Autowired
    private FormRepository formRepository;

    @PostMapping("/create/{formId}")
    public String addQuestion(@PathVariable Long formId, @RequestBody Question question) {
        Form form = formRepository.findById(formId).orElse(null);
        if (form == null) return "Form not found!";
        question.setForm(form);
        questionRepository.save(question);
        return "Question added to form.";
    }

    @GetMapping("/form/{formId}")
    public List<Question> getQuestionsByForm(@PathVariable Long formId) {
        return questionRepository.findByFormId(formId);
    }
}

@RestController
@RequestMapping("/options")
class OptionController {

    @Autowired
    private OptionRepository optionRepository;

    @Autowired
    private QuestionRepository questionRepository;

    @PostMapping("/create/{questionId}")
    public String addOption(@PathVariable Long questionId, @RequestBody Option option) {
        Question question = questionRepository.findById(questionId).orElse(null);
        if (question == null) return "Question not found!";
        option.setQuestion(question);
        optionRepository.save(option);
        return "Option added.";
    }

    @GetMapping("/question/{questionId}")
    public List<Option> getOptionsByQuestion(@PathVariable Long questionId) {
        return optionRepository.findByQuestionId(questionId);
    }
}

@RestController
@RequestMapping("/responses")
class ResponseController {

    @Autowired
    private ResponseRepository responseRepository;

    @Autowired
    private FormRepository formRepository;

    @Autowired
    private UserRepository userRepository;

    @PostMapping("/submit/{formId}/{userId}")
    public String submitResponse(@PathVariable Long formId, @PathVariable Long userId, @RequestBody Response response) {
        Form form = formRepository.findById(formId).orElse(null);
        User user = userRepository.findById(userId).orElse(null);
        if (form == null || user == null) return "Form or User not found!";
        response.setForm(form);
        response.setUser(user);
        responseRepository.save(response);
        return "Response submitted!";
    }

    @GetMapping("/form/{formId}")
    public List<Response> getResponsesByForm(@PathVariable Long formId) {
        return responseRepository.findByFormId(formId);
    }
}

@RestController
@RequestMapping("/users")
class UserController {

    @Autowired
    private UserRepository userRepository;

    @PostMapping("/create")
    public String createUser(@RequestBody User user) {
        userRepository.save(user);
        return "User created!";
    }

    @GetMapping("/all")
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }
}
    